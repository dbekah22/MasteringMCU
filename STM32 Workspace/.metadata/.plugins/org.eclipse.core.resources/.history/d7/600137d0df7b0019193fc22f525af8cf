/*
 * stm32f407xx.h
 *
 *  Created on: May 14, 2019
 *      Author: dhilan22
 *
 *  	This is an MCU-specific device header file for STM32F407G-DISC1 microcontroller
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

#include <stdint.h>

#define __vo volatile

// Base addresses of MCU embedded memories
#define FLASH_BASE				0x08000000U	// U represents unsigned integer
#define SRAM1_BASE				0x20000000U	// 112 KB (112*1024 = 114688 --> 1C00 in HEX)
#define SRAM2_BASE				0x20001C00U	// SRAM1 + 112 KB
#define ROM						0x1FFF0000U	// System Memory
#define SRAM 					SRAM1_BASE	// Will only be working with SRAM1 in our case

// Base addresses of BUS domains
#define PERIPH_BASE				0X40000000U
#define APB1PERIPH_BASE			PERIPH_BASE
#define APB2PERIPH_BASE			0X40010000U
#define AHB1PERIPH_BASE			0X40020000U
#define AHB2PERIPH_BASE			0X50000000U

// Base addresses of AHB1 peripherals
#define GPIOA_BASE				(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASE				(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASE				(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASE				(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASE				(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASE				(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASE				(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASE				(AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASE				(AHB1PERIPH_BASE + 0x2000)
#define GPIOJ_BASE				(AHB1PERIPH_BASE + 0x2400)
#define GPIOK_BASE				(AHB1PERIPH_BASE + 0x2800)

#define RCC_BASE				(AHB1PERIPH_BASE + 0x3800)

// Base addresses of APB1 peripherals
#define I2C1_BASE				(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASE				(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASE				(APB1PERIPH_BASE + 0x5C00)

#define SPI2_BASE				(APB1PERIPH_BASE + 0x3800)
#define SPI2_BASE				(APB1PERIPH_BASE + 0x3C00)

#define USART2_BASE				(APB1PERIPH_BASE + 0x4400)
#define USART3_BASE				(APB1PERIPH_BASE + 0x4800)
#define UART4_BASE				(APB1PERIPH_BASE + 0x4C00) // No S in name represents lack of synchronous communication support
#define UART5_BASE				(APB1PERIPH_BASE + 0x5000)

// Base addresses of APB2 peripherals
#define USART1_BASE				(APB2PERIPH_BASE + 0x1000)
#define USART6_BASE				(APB2PERIPH_BASE + 0x1400)
#define SPI1_BASE				(APB2PERIPH_BASE + 0x3000)
#define SYSCFG_BASE				(APB2PERIPH_BASE + 0x3800)
#define EXTI_BASE				(APB2PERIPH_BASE + 0x3C00)


/***** Peripheral register definition structures *****/

/* peripheral register definition structure for GPIO */
typedef struct
{								/* Short description, Address Offset */
	__vo uint32_t MODER;		/* GPIO port mode register, 0x00 */
	__vo uint32_t OTYPER;		/* GPIO port output type register, 0x04 */
	__vo uint32_t OSPEEDR;		/* GPIO port output speed register, 0x08 */
	__vo uint32_t PUPDR;		/* GPIO port pull-up/pull-down register, 0x0C */
	__vo uint32_t IDR;			/* GPIO port input data register, 0x10 */
	__vo uint32_t ODR;			/* GPIO port output data register, 0x14 */
	__vo uint32_t BSRR;			/* GPIO port bit set/reset register, 0x18 */
	__vo uint32_t LCKR;			/* GPIO port configuration lock register, 0x1C */
	__vo uint32_t AFR[2];		/* GPIO alternate function low [1] and high [2] registers, 0x20 and 0x24 */

}GPIO_RegDef_t;

/* peripheral register definition structure for RCC */
typedef struct
{								/* Short description, Address Offset */
	__vo uint32_t CR;			/* RCC clock control register, 0x00 */
	__vo uint32_t PLLCFGR;		/* RCC PLL configuration register, 0x04 */
	__vo uint32_t CFGR;			/* RCC clock configuration register, 0x08 */
	__vo uint32_t CIR;			/* RCC clock interrupt register, 0x0C */
	__vo uint32_t AHB1RSTR;		/* RCC AHB1 peripheral reset register, 0x10 */
	__vo uint32_t AHB2RSTR;		/* RCC AHB2 peripheral reset register, 0x14 */
	__vo uint32_t AHB2RSTR;		/* RCC AHB3 peripheral reset register, 0x18 */
	uint32_t RESERVED0;			/*Reserved, 0x1C */
	__vo uint32_t APB1RSTR;		/* RCC APB1 peripheral reset register, 0x20 */
	__vo uint32_t APB2RSTR;		/* RCC APB2 peripheral reset register, 0x24 */
	uint32_t RESERVED1[2];		/*Reserved, 0x28, 0x2C */
	__vo uint32_t AHB1ENR;		/* RCC AHB1 peripheral clock register, 0x30 */
	__vo uint32_t AHB2ENR;		/* RCC AHB2 peripheral clock register, 0x34 */
	__vo uint32_t AHB3ENR;		/* RCC AHB2 peripheral clock register, 0x38 */
	uint32_t RESERVED2;			/*Reserved, 0x3C */
	__vo uint32_t APB1ENR;		/* RCC APB1 peripheral clock enable register, 0x40 */
	__vo uint32_t APB2ENR;		/* RCC APB2 peripheral clock enable register, 0x44 */
	uint32_t RESERVED3[2];		/*Reserved, 0x48, 0x4C */
	__vo uint32_t AHB1LPNR;		/* RCC AHB1 peripheral clock enable in low power mode register, 0x50 */
	__vo uint32_t AHB2LPNR;		/* RCC AHB2 peripheral clock enable in low power mode register, 0x54 */
	__vo uint32_t AHB3LPNR;		/* RCC AHB3 peripheral clock enable in low power mode register, 0x58 */
	__vo uint32_t APB1LPENR;	/* RCC APB1 peripheral clock enable in low power mode register, 0x60 */
	__vo uint32_t APB2LPENR;	/* RCC APB2 peripheral clock enable in low power mode register, 0x64 */
	uint32_t RESERVED4[2];		/*Reserved, 0x68, 0x6C */
	__vo uint32_t BDCR;			/* RCC Backup domain control register, 0x70 */
	__vo uint32_t CSR;			/* RCC clock control & status register, 0x74 */
	uint32_t RESERVED5[2];		/*Reserved, 0x78, 0x7C */
	__vo uint32_t SSCGR;		/* RCC spread spectrum clock generation register, 0x80 */
	__vo uint32_t PLLI2SCFGR;	/* RCC PLLI2S configuration register, 0x84 */
	__vo uint32_t PLLSAICFGR;	/* RCC PLL configuration register, 0x88 */
	__vo uint32_t DCKCFGR;		/* RCC Dedicated Clock Configuration Register, 0x8C */

}RCC_RegDef_t;

// Peripheral Definitions ( peripheral base addresses typecasted to xxx_RegDef_t )

#define GPIOA	( (GPIO_RegDef_t*) GPIOA_BASE )
#define GPIOB	( (GPIO_RegDef_t*) GPIOB_BASE )
#define GPIOC	( (GPIO_RegDef_t*) GPIOC_BASE )
#define GPIOD	( (GPIO_RegDef_t*) GPIOD_BASE )
#define GPIOE	( (GPIO_RegDef_t*) GPIOE_BASE )
#define GPIOF	( (GPIO_RegDef_t*) GPIOF_BASE )
#define GPIOG	( (GPIO_RegDef_t*) GPIOG_BASE )
#define GPIOH	( (GPIO_RegDef_t*) GPIOH_BASE )
#define GPIOI	( (GPIO_RegDef_t*) GPIOI_BASE )
#define GPIOJ	( (GPIO_RegDef_t*) GPIOJ_BASE )
#define GPIOK	( (GPIO_RegDef_t*) GPIOK_BASE )

#define RCC 	( (RCC_RegDef_t*) RCC_BASE )

// Clock enable macros for GPIOx peripherals
#define GPIOA_PCLK_EN()		( RCC->AHB1ENR |= (1 << 0) )	// Turn on the bit for the corresponding GPIO port clock
#define GPIOB_PCLK_EN()		( RCC->AHB1ENR |= (1 << 1) )
#define GPIOC_PCLK_EN()		( RCC->AHB1ENR |= (1 << 2) )
#define GPIOD_PCLK_EN()		( RCC->AHB1ENR |= (1 << 3) )
#define GPIOE_PCLK_EN()		( RCC->AHB1ENR |= (1 << 4) )
#define GPIOF_PCLK_EN()		( RCC->AHB1ENR |= (1 << 5) )
#define GPIOG_PCLK_EN()		( RCC->AHB1ENR |= (1 << 6) )
#define GPIOH_PCLK_EN()		( RCC->AHB1ENR |= (1 << 7) )
#define GPIOI_PCLK_EN()		( RCC->AHB1ENR |= (1 << 8) )
#define GPIOJ_PCLK_EN()		( RCC->AHB1ENR |= (1 << 9) )
#define GPIOK_PCLK_EN()		( RCC->AHB1ENR |= (1 << 10) )

// Clock enable macros for I2Cx peripherals
#define I2C1_PCLK_EN()		( RCC->APB1ENR |= (1 << 21) )
#define I2C2_PCLK_EN()		( RCC->APB1ENR |= (1 << 22) )
#define I2C3_PCLK_EN()		( RCC->APB1ENR |= (1 << 23) )

// Clock enable macros for SPIx peripherals
#define SPI1_PCLK_EN()		( RCC->APB2ENR |= (1 << 12) )
#define SPI2_PCLK_EN()		( RCC->APB1ENR |= (1 << 14) )
#define SPI3_PCLK_EN()		( RCC->APB1ENR |= (1 << 15) )
#define SPI4_PCLK_EN()		( RCC->APB2ENR |= (1 << 13) )
#define SPI5_PCLK_EN()		( RCC->APB2ENR |= (1 << 20) )
#define SPI6_PCLK_EN()		( RCC->APB2ENR |= (1 << 21) )

// Clock enable macros for USARTx peripherals
#define USART1_PCLK_EN()	( RCC->APB2ENR != (1 << 4) )
#define UART2_PCLK_EN() 	( RCC->APB1ENR != (1 << 17) )
#define UART3_PCLK_EN() 	( RCC->APB1ENR != (1 << 18) )
#define UART4_PCLK_EN() 	( RCC->APB1ENR != (1 << 19) )
#define UART5_PCLK_EN() 	( RCC->APB1ENR != (1 << 20) )
#define USART6_PCLK_EN() 	( RCC->APB2ENR != (1 << 5) )

// Clock enable macros for SYSCFG peripherals
#define SYSCFG_PCLK_EN() 	( RCC->APB2ENR != (1 << 14) )

// Clock disable macros for GPIOx peripherals
#define GPIOA_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 0) )	// Reset bit for the corresponding GPIO port clock
#define GPIOB_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 1) )
#define GPIOC_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 2) )
#define GPIOD_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 3) )
#define GPIOE_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 4) )
#define GPIOF_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 5) )
#define GPIOG_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 6) )
#define GPIOH_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 7) )
#define GPIOI_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 8) )
#define GPIOJ_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 9) )
#define GPIOK_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 10) )

// Clock disable macros for I2Cx peripherals
#define I2C1_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 21) )
#define I2C2_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 22) )
#define I2C3_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 23) )

// Clock disable macros for SPIx peripherals
#define SPI1_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 12) )
#define SPI2_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 14) )
#define SPI3_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 15) )
#define SPI4_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 13) )
#define SPI5_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 20) )
#define SPI6_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 21) )

// Clock disable macros for USARTx peripherals
#define USART1_PCLK_DI() 	( RCC->APB2ENR &= ~(1 << 4) )
#define UART2_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 17) )
#define UART3_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 18) )
#define UART4_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 19) )
#define UART5_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 20) )
#define USART6_PCLK_DI() 	( RCC->APB2ENR &= ~(1 << 5) )

// Clock disable macros for SYSCFG peripherals
#define SYSCFG_PCLK_DI() 	( RCC->APB2ENR &= ~(1 << 14) )

#endif /* INC_STM32F407XX_H_ */
