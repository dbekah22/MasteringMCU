/*
 * stm32f407xx_i2c.c
 *
 *  Created on: Jun 21, 2019
 *      Author: dhilan22
 */

#include "stm32f407xx_i2c.h"

uint16_t AHBP_PreScalar[8] = {2,4,8,16,32,64,128,256,512};
uint16_t APB1_PreScalar[4] = {2,4,8,16};

// Helper functions
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
}

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1;	// This is making space for the r/w bit, and
	SlaveAddr &= ~(1);			// The LSB is r/w bit, which must be 0 for WRITE, hence the reset
	// Now, SlaveAddr represents the slave address and the r/w bit
	pI2Cx->DR = SlaveAddr;
}

static void ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
	uint32_t dummyRead = pI2Cx->SR1;
	dummyRead = pI2Cx->SR2;
	(void)dummyRead;
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
}

/************************************************************************
 * @fn			- I2C_PeriCLKControl
 *
 * @brief		- This function enables or disables peripheral clocks for I2C ports
 *
 * @pI2Cx		- Base address pointer to I2C peripheral
 * @ENorDI		- Enable or Disable macros
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
void I2C_PeriCLKControl(I2C_RegDef_t *pI2Cx, uint8_t ENorDI)
{
	if (ENorDI == ENABLE)
	{
		if (pI2Cx == I2C1) {
			I2C1_PCLK_EN();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_EN();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_EN();
		}
	}
	else
	{
		if (pI2Cx == I2C1) {
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}
}


/************************************************************************
 * @fn			- RCC_GetPLLOutputClk
 *
 * @brief		- This function returns the system clock frequency when PLL is used
 *
 * @none		- none
 *
 * @return		- PLL_Clk
 *
 * @Note		- This function is not yet implemented since the PLL oscillator will not be used in the
 * 				  scope of this MCU development course
 *
 */
uint32_t RCC_GetPLLOutputClk(void)
{
	uint32_t PLL_Clk;
	return PLL_Clk;
}


/************************************************************************
 * @fn			- RCC_GetPCLK1Value
 *
 * @brief		- This function calculates and returns the PCLK1 value
 *
 * @none		- none
 *
 * @return		- pclk1
 *
 * @Note		- none
 *
 */
uint32_t RCC_GetPCLK1Value(void)
{
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3); 	// Bring those 2 clock-switch bits (SWS) to the lsb (least significant bit) position and mask
										// 0x3 => 11 in binary
	if (clksrc == 0)
	{
		SystemClk = 16000000;
	} else if (clksrc == 1) {
		SystemClk = 8000000;
	} else if (clksrc == 2)
	{
		SystemClk = RCC_GetPLLOutputClk();	// Call function to return system clock when PLL is used
	}

	// For AHB
	temp = ((RCC->CFGR >> 4) & 0xF); 	// Bring the 4 AHB prescalar bits (HPRE) to lsb position and mask
										// 0xF => 1111 in binary
	if (temp < 8)
	{
		ahbp = 1;
	} else
	{
		ahbp = AHBP_PreScalar[temp-8];
	}

	// For APB1
	temp = ((RCC->CFGR >> 10) & 0x7); 	// Bring the 3 APB1 prescalar bits (PPRE1) to lsb position and mask
										// 0x7 => 111 in binary
	if (temp < 8)
	{
		apb1p = 1;
	} else
	{
		apb1p = APB1_PreScalar[temp-4];
	}

	pclk1 = (SystemClk/ahbp) / apb1p;

	return pclk1;
}


/************************************************************************
 * @fn			- I2C_Init
 *
 * @brief		- This function initializes the appropriate I2C ports / pins
 *
 * @pI2CHandle	- Pointer to handle access to different I2C registers for configuration
 *
 * @return		- none
 *
 * @Note		- It is important to use bitwise OR to set the physical registers in
 * 				  order to prevent affecting all the bits in the register
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	// Configure I2C_CR1 register
	uint32_t temp = 0;

	// Enable I2C peripheral clock
	I2C_PeriCLKControl(pI2CHandle->pI2Cx,ENABLE);

	// Configure ACK control bit
	temp |= pI2CHandle->I2C_PinConfig.I2C_ACKControl << 10;
	pI2CHandle->pI2Cx->CR1 = temp;

	// Configure FREQ field of CR2
	temp = 0;
	temp |= RCC_GetPCLK1Value() / 1000000U;
	pI2CHandle->pI2Cx->CR2 = (temp & 0x3F); // Masking with 0x3F ensures only the FREQ field bits (0:5) are valid and the rest are masked out

	// Program the device own address
	temp |= pI2CHandle->I2C_PinConfig.I2C_DeviceAddress << 1;	// Address starts at bit postion 1
	temp |= (1 << 14);	// RM states that bit 14 should always be kept to 1 by software
	pI2CHandle->pI2Cx->OAR1 = temp;

	// CCR Calculations
	uint16_t ccr_value = 0;
	temp = 0;

	if (pI2CHandle->I2C_PinConfig.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// Standard Mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_PinConfig.I2C_SCLSpeed);
		temp |= (ccr_value & 0xFFF);	// Mask with 0xFFF since there are 12 bit positions that are valid for CCR field
	} else
	{
		// Fast Mode
		temp |= (1 << 15);	// Set bit 15 to 1 to enable fast mode I2C
		temp |= (pI2CHandle->I2C_PinConfig.I2C_FMDutyCycle << 14);

		if (pI2CHandle->I2C_PinConfig.I2C_FMDutyCycle == I2C_FM_2)
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_PinConfig.I2C_SCLSpeed);
		} else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_PinConfig.I2C_SCLSpeed);
		}
		temp |= (ccr_value & 0xFFF);
	}

	pI2CHandle->pI2Cx->CCR = temp;

	// Configure TRISE
	if (pI2CHandle->I2C_PinConfig.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		temp = (RCC_GetPCLK1Value() / 1000000U) + 1;	// t_rise calculations
	} else
	{
		temp = ( (RCC_GetPCLK1Value() * 300) / 1000000U) + 1;
	}
	pI2CHandle->pI2Cx->TRISE = (temp & 0x3F);

}


/************************************************************************
 * @fn			- I2C_DeInit
 *
 * @brief		- This function de-initializes the appropriate I2C ports / pins
 *
 * @pI2Cx		- Base address pointer to I2C peripheral
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{
	if (pI2Cx == I2C1) {
		I2C1_REG_RESET();
	} else if (pI2Cx == I2C2) {
		I2C2_REG_RESET();
	} else if (pI2Cx == I2C3) {
		I2C3_REG_RESET();
	}
}


/************************************************************************
 * @fn			- I2C_GetFlagStatus
 *
 * @brief		- This function return the status of the appropriate flag
 *
 * @pSPIx		- Base address pointer to I2C peripheral
 * @FlagName	- Name of flag
 *
 * @return		- SET or RESET
 *
 * @Note		- none
 *
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
	if (pI2Cx->SR1 & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}


/************************************************************************
 * @fn			- I2C_MasterSendData
 *
 * @brief		- This function sends data from master to slave over I2C communication
 *
 * @pI2CHandle	- Pointer to handle access to different I2C registers for configuration
 * @pTXBuffer	- Indicator in status register to confirm whether data can be programmed yet or not
 * @Len			- Number of bytes to transmit (if 0, no data to send)
 * @SlaveAddr	- Slave Address
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTXBuffer, uint32_t Len, uint8_t SlaveAddr)
{
	// 1. Generate Start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	// 2. Confirm that start generation is completed by checking the SB flag in SR1 (until SB is cleared, SCL will be stretched to LOW)
	while (! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	// 3. Send slave address with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);

	// 4. Confirm that address phase is completed by checking the ADDR flag in SR1
	while (! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	// 5. Clear ADDR flag according to its software sequence (until ADDR is cleared, SCL will be stretched to LOW)
	ClearADDRFlag(pI2CHandle->pI2Cx);

	// 6. Send data until Len becomes 0
	while (Len > 0)
	{
		while (! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
		pI2CHandle->pI2Cx->DR = *pTXBuffer;
		pTXBuffer++;
		Len--;
	}

	// 7. Once Len becomes 0, wait for TXE=1 and BTF=1 before generating STOP condition
	//	Note: TXE=1 & BTF=1 means that SR and DR are both empty and next transmission should begin
	while (! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
	while (! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));

	// 8. Generate STOP condition
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
}

