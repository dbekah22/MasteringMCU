/*
 * stm32f407xx_gpio.c
 *
 *  Created on: May 21, 2019
 *      Author: dhilan22
 *
 *      GPIO Driver Source File
 */

#include "stm32f407xx_gpio.h"

/************************************************************************
 * @fn			- GPIO_PeriCLKControl
 *
 * @brief		- This function enables or disables peripheral clocks for GPIO ports
 *
 * @pGPIOx		- Base address pointer to GPIO peripheral
 * @ENorDI		- Enable or Disable macros
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
void GPIO_PeriCLKControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI)
{
	if (ENorDI == ENABLE)
	{
		if (pGPIOx == GPIOA) {
			GPIOA_PCLK_EN();
		} else if (pGPIOx == GPIOB) {
			GPIOB_PCLK_EN();
		} else if (pGPIOx == GPIOC) {
			GPIOC_PCLK_EN();
		} else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_EN();
		} else if (pGPIOx == GPIOE) {
			GPIOE_PCLK_EN();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_EN();
		} else if (pGPIOx == GPIOG) {
			GPIOG_PCLK_EN();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_EN();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_EN();
		} else if (pGPIOx == GPIOJ) {
			GPIOJ_PCLK_EN();
		} else if (pGPIOx == GPIOK) {
			GPIOK_PCLK_EN();
		}
	}
	else
	{
		if (pGPIOx == GPIOA) {
			GPIOA_PCLK_DI();
		} else if (pGPIOx == GPIOB) {
			GPIOB_PCLK_DI();
		} else if (pGPIOx == GPIOC) {
			GPIOC_PCLK_DI();
		} else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOE) {
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		} else if (pGPIOx == GPIOG) {
			GPIOG_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		} else if (pGPIOx == GPIOJ) {
			GPIOJ_PCLK_DI();
		} else if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}


/************************************************************************
 * @fn			- GPIO_Init
 *
 * @brief		- This function
 *
 * @pGPIOHandle	-
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint32_t temp = 0;

	// 1. Configure Mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		// Non-interrupt Modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNum) );
		pGPIOHandle->pGPIOx->MODER = temp;

	} else {
		// Interrupt Modes
	}
	temp = 0;

	// 2. Configure Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNum) );
	pGPIOHandle->pGPIOx->OSPEEDR = temp;
	temp = 0;

	// 3. Configure Pull-up / Pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNum) );
	pGPIOHandle->pGPIOx->PUPDR = temp;
	temp = 0;

	// 4. Configure OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNum );
	pGPIOHandle->pGPIOx->OTYPER = temp;
	temp = 0;

	// 5. Configure Alt. Functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFUN)
	{

	}
}


/************************************************************************
 * @fn			- GPIO_DeInit
 *
 * @brief		- This function
 *
 * @pGPIOHandle	-
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{

}

/************************************************************************
 * @fn			- GPIO_GPIO_ReadPin
 *
 * @brief		- This function
 *
 * @pGPIOx		- Base address pointer to GPIO peripheral
 * @PinNum		- Pin Number
 *
 * @return		- none
 *
 * @Note		- none
 *
 */
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum)
{
	return 0;
}

uint16_t GPIO_ReadPort(GPIO_RegDef_t *pGPIOx);
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum, uint8_t Value);
void GPIO_WritePort(GPIO_RegDef_t *pGPIOx, uint16_t Value);
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum);

// IRQ Configuration and ISR Handling
void GPIO_IRQConfig(uint8_t IRQNum, uint8_t IRQPriority, uint8_t ENorDI);
void GPIO_IRQHandling(uint8_t PinNum);
