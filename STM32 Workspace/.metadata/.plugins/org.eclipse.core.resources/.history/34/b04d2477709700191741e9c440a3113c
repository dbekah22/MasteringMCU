/*
 * I2C_MasterTX_testing.c
 *
 *  Created on: Jun 25, 2019
 *      Author: dhilan22
 */

#include <stdio.h>
#include <string.h>
#include "stm32f407xx.h"

/* For this source file, the exercise will be to test Master TX (transmission) of a string through I2C:
 * Initialize the appropriate GPIO pins to work for I2C communication (refer to Alt. Function Mapping and
 * select the set of SPI pins for the correct application)
 * 	PB6 --> I2C1_SCL
 * 	PB9 --> I2C1_SDA
 * 	Alternate Function Mode --> 4
 */

void SPI_GPIOInit(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
	SPIPins.GPIO_PinConfig.GPIO_AltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;	// Required since you are driving a slave, and want to avoid possibility of junk data being sent to it
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_14;
	GPIO_Init(&SPIPins);

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_15;
	GPIO_Init(&SPIPins);

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_13;
	GPIO_Init(&SPIPins);

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_12;
	GPIO_Init(&SPIPins);
}

void SPI2_Init(void)
{
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
	SPI2Handle.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD; // Full-duplex
	SPI2Handle.SPI_PinConfig.SPI_DeviceMode = SPI_MODE_MASTER;	// Master Mode
	SPI2Handle.SPI_PinConfig.SPI_SclkSpeed = SPI_SPEED_DIV8; 	// Generates SCLK of 2 MHz
	SPI2Handle.SPI_PinConfig.SPI_DFF = SPI_DFF_8BITS;
	SPI2Handle.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2Handle.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI2Handle.SPI_PinConfig.SPI_SSM = SPI_SSM_DI;				// SSM disabled for NSS pin

	SPI_Init(&SPI2Handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GpioBlueBtn;
	memset(&GpioBlueBtn,0,sizeof(GpioBlueBtn));						// Clear default garbage bits
	GpioBlueBtn.pGPIOx = GPIOA;										// Create structure pointer and set to port A (user button found there)
	GpioBlueBtn.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_0;			// Set pin number to 0 (corresponds to blue user button)
	GpioBlueBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;			// Pin mode is input
	GpioBlueBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;		// Set speed to fast
	GpioBlueBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;	// Push-pull
	GpioBlueBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	GPIO_Init(&GpioBlueBtn);
}

void delay(void)
{
	for (uint32_t i=0; i<500000/2; i++); // ~200 ms if system clock is at 16 MHz
}


