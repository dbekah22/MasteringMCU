/*
 * stm32f407xx.h
 *
 *  Created on: May 14, 2019
 *      Author: dhilan22
 *
 *  	This is an MCU-specific device header file for STM32F407G-DISC1 microcontroller
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

#include <stddef.h>
#include <stdint.h>

#define __vo volatile
#define __weak __attribute__((weak))

/********** Processor Specific Details **********/

/* These addresses can be found from the cortex manual */

// ARM Cortex Mx Processor NVIC ISERx Register Addresses
#define NVIC_ISER0				( (__vo uint32_t *)0xE000E100 )
#define NVIC_ISER1				( (__vo uint32_t *)0xE000E104 )
#define NVIC_ISER2				( (__vo uint32_t *)0xE000E108 )
#define NVIC_ISER3				( (__vo uint32_t *)0xE000E10C )
#define NVIC_ISER4				( (__vo uint32_t *)0xE000E110 )
#define NVIC_ISER5				( (__vo uint32_t *)0xE000E114 )
#define NVIC_ISER6				( (__vo uint32_t *)0xE000E118 )
#define NVIC_ISER7				( (__vo uint32_t *)0xE000E11C )

// ARM Cortex Mx Processor NVIC ICERx Register Addresses
#define NVIC_ICER0				( (__vo uint32_t *)0xE000E180 )
#define NVIC_ICER1				( (__vo uint32_t *)0xE000E184 )
#define NVIC_ICER2				( (__vo uint32_t *)0xE000E188 )
#define NVIC_ICER3				( (__vo uint32_t *)0xE000E18C )
#define NVIC_ICER4				( (__vo uint32_t *)0xE000E190 )
#define NVIC_ICER5				( (__vo uint32_t *)0xE000E194 )
#define NVIC_ICER6				( (__vo uint32_t *)0xE000E198 )
#define NVIC_ICER7				( (__vo uint32_t *)0xE000E19C )

// ARM Cortex Mx Processor NVIC Priority Register Addresses
#define NVIC_PR_BASE			( (__vo uint32_t *)0xE000E400 )

// ARM Cortex Mx Processor number of bits implemented in Priority Register
#define NO_PR_BITS_IMP			4

/************************************************/

// Base addresses of MCU embedded memories
#define FLASH_BASE				0x08000000U	// U represents unsigned integer
#define SRAM1_BASE				0x20000000U	// 112 KB (112*1024 = 114688 --> 1C00 in HEX)
#define SRAM2_BASE				0x20001C00U	// SRAM1 + 112 KB
#define ROM						0x1FFF0000U	// System Memory
#define SRAM 					SRAM1_BASE	// Will only be working with SRAM1 in our case

// Base addresses of BUS domains
#define PERIPH_BASE				0X40000000U
#define APB1PERIPH_BASE			PERIPH_BASE
#define APB2PERIPH_BASE			0X40010000U
#define AHB1PERIPH_BASE			0X40020000U
#define AHB2PERIPH_BASE			0X50000000U

// Base addresses of AHB1 peripherals
#define GPIOA_BASE				(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASE				(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASE				(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASE				(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASE				(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASE				(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASE				(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASE				(AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASE				(AHB1PERIPH_BASE + 0x2000)
#define GPIOJ_BASE				(AHB1PERIPH_BASE + 0x2400)
#define GPIOK_BASE				(AHB1PERIPH_BASE + 0x2800)

#define RCC_BASE				(AHB1PERIPH_BASE + 0x3800)

// Base addresses of APB1 peripherals
#define I2C1_BASE				(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASE				(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASE				(APB1PERIPH_BASE + 0x5C00)

#define SPI2_BASE				(APB1PERIPH_BASE + 0x3800)
#define SPI3_BASE				(APB1PERIPH_BASE + 0x3C00)

#define USART2_BASE				(APB1PERIPH_BASE + 0x4400)
#define USART3_BASE				(APB1PERIPH_BASE + 0x4800)
#define UART4_BASE				(APB1PERIPH_BASE + 0x4C00) // No S in name represents lack of synchronous communication support
#define UART5_BASE				(APB1PERIPH_BASE + 0x5000)

// Base addresses of APB2 peripherals
#define USART1_BASE				(APB2PERIPH_BASE + 0x1000)
#define USART6_BASE				(APB2PERIPH_BASE + 0x1400)
#define SPI1_BASE				(APB2PERIPH_BASE + 0x3000)
#define SPI4_BASE				(APB2PERIPH_BASE + 0x3400)
#define SYSCFG_BASE				(APB2PERIPH_BASE + 0x3800)
#define EXTI_BASE				(APB2PERIPH_BASE + 0x3C00)


/***** Peripheral register definition structures *****/

/* peripheral register definition structure for GPIO */
typedef struct
{								/* Short description, Address Offset */
	__vo uint32_t MODER;		/* GPIO port mode register, 0x00 */
	__vo uint32_t OTYPER;		/* GPIO port output type register, 0x04 */
	__vo uint32_t OSPEEDR;		/* GPIO port output speed register, 0x08 */
	__vo uint32_t PUPDR;		/* GPIO port pull-up/pull-down register, 0x0C */
	__vo uint32_t IDR;			/* GPIO port input data register, 0x10 */
	__vo uint32_t ODR;			/* GPIO port output data register, 0x14 */
	__vo uint32_t BSRR;			/* GPIO port bit set/reset register, 0x18 */
	__vo uint32_t LCKR;			/* GPIO port configuration lock register, 0x1C */
	__vo uint32_t AFR[2];		/* GPIO alternate function low [1] and high [2] registers, 0x20 and 0x24 */

}GPIO_RegDef_t;

/* peripheral register definition structure for SPI */
typedef struct
{								/* Short description, Address Offset */
	__vo uint32_t CR1;			/* SPI control register 1, 0x00 */
	__vo uint32_t CR2;			/* SPI control register 2, 0x04 */
	__vo uint32_t SR;			/* SPI status register, 0x08 */
	__vo uint32_t DR;			/* SPI data register, 0x0C */
	__vo uint32_t CRCPR;		/* SPI CRC polynomial register, 0x10 */
	__vo uint32_t RXCRCR;		/* SPI RX CRC register, 0x14 */
	__vo uint32_t TXCRCR;		/* SPI TX CRC register, 0x18 */
	__vo uint32_t I2SCFGR;		/* SPI_I2S configuration register, 0x1C */
	__vo uint32_t I2SPR;		/* SPI_I2S prescaler register, 0x20 */

}SPI_RegDef_t;

/* peripheral register definition structure for I2C */
typedef struct
{								/* Short description, Address Offset */
	__vo uint32_t CR1;			/* I2C control register 1, 0x00 */
	__vo uint32_t CR2;			/* I2C control register 2, 0x04 */
	__vo uint32_t OAR1;			/* I2C Own address register 1, 0x08 */
	__vo uint32_t OAR2;			/* I2C Own address register 2, 0x0C */
	__vo uint32_t DR;			/* I2C Data register, 0x10 */
	__vo uint32_t SR1;			/* I2C Status register 1, 0x14 */
	__vo uint32_t SR2;			/* I2C Status register 2, 0x18 */
	__vo uint32_t CCR;			/* I2C Clock control register, 0x1C */
	__vo uint32_t TRISE;		/* I2C TRISE register, 0x20 */
	__vo uint32_t FLTR;			/* I2C FLTR register, 0x24 */

}I2C_RegDef_t;

/* peripheral register definition structure for RCC */
typedef struct
{								/* Short description, Address Offset */
	__vo uint32_t CR;			/* RCC clock control register, 0x00 */
	__vo uint32_t PLLCFGR;		/* RCC PLL configuration register, 0x04 */
	__vo uint32_t CFGR;			/* RCC clock configuration register, 0x08 */
	__vo uint32_t CIR;			/* RCC clock interrupt register, 0x0C */
	__vo uint32_t AHB1RSTR;		/* RCC AHB1 peripheral reset register, 0x10 */
	__vo uint32_t AHB2RSTR;		/* RCC AHB2 peripheral reset register, 0x14 */
	__vo uint32_t AHB3RSTR;		/* RCC AHB3 peripheral reset register, 0x18 */
	uint32_t RESERVED0;			/*Reserved, 0x1C */
	__vo uint32_t APB1RSTR;		/* RCC APB1 peripheral reset register, 0x20 */
	__vo uint32_t APB2RSTR;		/* RCC APB2 peripheral reset register, 0x24 */
	uint32_t RESERVED1[2];		/*Reserved, 0x28, 0x2C */
	__vo uint32_t AHB1ENR;		/* RCC AHB1 peripheral clock register, 0x30 */
	__vo uint32_t AHB2ENR;		/* RCC AHB2 peripheral clock register, 0x34 */
	__vo uint32_t AHB3ENR;		/* RCC AHB2 peripheral clock register, 0x38 */
	uint32_t RESERVED2;			/*Reserved, 0x3C */
	__vo uint32_t APB1ENR;		/* RCC APB1 peripheral clock enable register, 0x40 */
	__vo uint32_t APB2ENR;		/* RCC APB2 peripheral clock enable register, 0x44 */
	uint32_t RESERVED3[2];		/*Reserved, 0x48, 0x4C */
	__vo uint32_t AHB1LPNR;		/* RCC AHB1 peripheral clock enable in low power mode register, 0x50 */
	__vo uint32_t AHB2LPNR;		/* RCC AHB2 peripheral clock enable in low power mode register, 0x54 */
	__vo uint32_t AHB3LPNR;		/* RCC AHB3 peripheral clock enable in low power mode register, 0x58 */
	__vo uint32_t APB1LPENR;	/* RCC APB1 peripheral clock enable in low power mode register, 0x60 */
	__vo uint32_t APB2LPENR;	/* RCC APB2 peripheral clock enable in low power mode register, 0x64 */
	uint32_t RESERVED4[2];		/*Reserved, 0x68, 0x6C */
	__vo uint32_t BDCR;			/* RCC Backup domain control register, 0x70 */
	__vo uint32_t CSR;			/* RCC clock control & status register, 0x74 */
	uint32_t RESERVED5[2];		/*Reserved, 0x78, 0x7C */
	__vo uint32_t SSCGR;		/* RCC spread spectrum clock generation register, 0x80 */
	__vo uint32_t PLLI2SCFGR;	/* RCC PLLI2S configuration register, 0x84 */
	__vo uint32_t PLLSAICFGR;	/* RCC PLL configuration register, 0x88 */
	__vo uint32_t DCKCFGR;		/* RCC Dedicated Clock Configuration Register, 0x8C */

}RCC_RegDef_t;

/* peripheral register definition structure for EXTI */
typedef struct
{
	__vo uint32_t IMR;		/* Interrupt mask register, 0x00 */
	__vo uint32_t EMR;		/* Event mask register, 0x04 */
	__vo uint32_t RTSR;		/* Rising trigger selection register, 0x08 */
	__vo uint32_t FTSR;		/* Falling trigger selection register, 0x0C */
	__vo uint32_t SWIER;	/* Software interrupt event register, 0x10 */
	__vo uint32_t PR;		/* Pending register, 0x14 */

}EXTI_RegDef_t;

/* peripheral register definition structure for SYSCFG */
typedef struct
{
	__vo uint32_t MEMRMP;		/* SYSCFG memory remap register, 0x00 */
	__vo uint32_t PMC;			/* SYSCFG peripheral mode configuration register, 0x04 */
	__vo uint32_t EXTICR[4];	/* SYSCFG external interrupt configuration registers 1-4, 0x08-0x14 */
	uint32_t RESERVED1[2];		/* 0x18-0x1C */
	__vo uint32_t CMPCR;		/* Compensation cell control register, 0x20 */

}SYSCFG_RegDef_t;

// Peripheral Definitions ( peripheral base addresses typecasted to xxx_RegDef_t )

#define GPIOA	( (GPIO_RegDef_t*) GPIOA_BASE )
#define GPIOB	( (GPIO_RegDef_t*) GPIOB_BASE )
#define GPIOC	( (GPIO_RegDef_t*) GPIOC_BASE )
#define GPIOD	( (GPIO_RegDef_t*) GPIOD_BASE )
#define GPIOE	( (GPIO_RegDef_t*) GPIOE_BASE )
#define GPIOF	( (GPIO_RegDef_t*) GPIOF_BASE )
#define GPIOG	( (GPIO_RegDef_t*) GPIOG_BASE )
#define GPIOH	( (GPIO_RegDef_t*) GPIOH_BASE )
#define GPIOI	( (GPIO_RegDef_t*) GPIOI_BASE )
#define GPIOJ	( (GPIO_RegDef_t*) GPIOJ_BASE )
#define GPIOK	( (GPIO_RegDef_t*) GPIOK_BASE )

#define SPI1	( (SPI_RegDef_t*) SPI1_BASE )
#define SPI2	( (SPI_RegDef_t*) SPI2_BASE )
#define SPI3	( (SPI_RegDef_t*) SPI3_BASE )
#define SPI4	( (SPI_RegDef_t*) SPI4_BASE )

#define I2C1	( (I2C_RegDef_t*) I2C1_BASE )
#define I2C2	( (I2C_RegDef_t*) I2C2_BASE )
#define I2C3	( (I2C_RegDef_t*) I2C3_BASE )

#define RCC 	( (RCC_RegDef_t*) RCC_BASE )
#define EXTI	( (EXTI_RegDef_t*) EXTI_BASE )
#define SYSCFG  ( (SYSCFG_RegDef_t*) SYSCFG_BASE )

// Clock enable macros for GPIOx peripherals
#define GPIOA_PCLK_EN()		( RCC->AHB1ENR |= (1 << 0) )	// Turn on the bit for the corresponding GPIO port clock
#define GPIOB_PCLK_EN()		( RCC->AHB1ENR |= (1 << 1) )
#define GPIOC_PCLK_EN()		( RCC->AHB1ENR |= (1 << 2) )
#define GPIOD_PCLK_EN()		( RCC->AHB1ENR |= (1 << 3) )
#define GPIOE_PCLK_EN()		( RCC->AHB1ENR |= (1 << 4) )
#define GPIOF_PCLK_EN()		( RCC->AHB1ENR |= (1 << 5) )
#define GPIOG_PCLK_EN()		( RCC->AHB1ENR |= (1 << 6) )
#define GPIOH_PCLK_EN()		( RCC->AHB1ENR |= (1 << 7) )
#define GPIOI_PCLK_EN()		( RCC->AHB1ENR |= (1 << 8) )
#define GPIOJ_PCLK_EN()		( RCC->AHB1ENR |= (1 << 9) )
#define GPIOK_PCLK_EN()		( RCC->AHB1ENR |= (1 << 10) )

// Clock enable macros for I2Cx peripherals
#define I2C1_PCLK_EN()		( RCC->APB1ENR |= (1 << 21) )
#define I2C2_PCLK_EN()		( RCC->APB1ENR |= (1 << 22) )
#define I2C3_PCLK_EN()		( RCC->APB1ENR |= (1 << 23) )

// Clock enable macros for SPIx peripherals
#define SPI1_PCLK_EN()		( RCC->APB2ENR |= (1 << 12) )
#define SPI2_PCLK_EN()		( RCC->APB1ENR |= (1 << 14) )
#define SPI3_PCLK_EN()		( RCC->APB1ENR |= (1 << 15) )
#define SPI4_PCLK_EN()		( RCC->APB2ENR |= (1 << 13) )
#define SPI5_PCLK_EN()		( RCC->APB2ENR |= (1 << 20) )
#define SPI6_PCLK_EN()		( RCC->APB2ENR |= (1 << 21) )

// Clock enable macros for USARTx peripherals
#define USART1_PCLK_EN()	( RCC->APB2ENR != (1 << 4) )
#define UART2_PCLK_EN() 	( RCC->APB1ENR != (1 << 17) )
#define UART3_PCLK_EN() 	( RCC->APB1ENR != (1 << 18) )
#define UART4_PCLK_EN() 	( RCC->APB1ENR != (1 << 19) )
#define UART5_PCLK_EN() 	( RCC->APB1ENR != (1 << 20) )
#define USART6_PCLK_EN() 	( RCC->APB2ENR != (1 << 5) )

// Clock enable macros for SYSCFG peripherals
#define SYSCFG_PCLK_EN() 	( RCC->APB2ENR != (1 << 14) )

// Clock disable macros for GPIOx peripherals
#define GPIOA_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 0) )	// Reset bit for the corresponding GPIO port clock
#define GPIOB_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 1) )
#define GPIOC_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 2) )
#define GPIOD_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 3) )
#define GPIOE_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 4) )
#define GPIOF_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 5) )
#define GPIOG_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 6) )
#define GPIOH_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 7) )
#define GPIOI_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 8) )
#define GPIOJ_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 9) )
#define GPIOK_PCLK_DI()		( RCC->AHB1ENR &= ~(1 << 10) )

// Clock disable macros for I2Cx peripherals
#define I2C1_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 21) )
#define I2C2_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 22) )
#define I2C3_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 23) )

// Clock disable macros for SPIx peripherals
#define SPI1_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 12) )
#define SPI2_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 14) )
#define SPI3_PCLK_DI()		( RCC->APB1ENR &= ~(1 << 15) )
#define SPI4_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 13) )
#define SPI5_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 20) )
#define SPI6_PCLK_DI()		( RCC->APB2ENR &= ~(1 << 21) )

// Clock disable macros for USARTx peripherals
#define USART1_PCLK_DI() 	( RCC->APB2ENR &= ~(1 << 4) )
#define UART2_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 17) )
#define UART3_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 18) )
#define UART4_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 19) )
#define UART5_PCLK_DI() 	( RCC->APB1ENR &= ~(1 << 20) )
#define USART6_PCLK_DI() 	( RCC->APB2ENR &= ~(1 << 5) )

// Clock disable macros for SYSCFG peripherals
#define SYSCFG_PCLK_DI() 	( RCC->APB2ENR &= ~(1 << 14) )

// Macros to reset GPIOx peripherals
#define GPIOA_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1 << 0)); } while(0)
#define GPIOB_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1 << 1)); } while(0)
#define GPIOC_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1 << 2)); } while(0)
#define GPIOD_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1 << 3)); } while(0)
#define GPIOE_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1 << 4)); } while(0)
#define GPIOF_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1 << 5)); } while(0)
#define GPIOG_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1 << 6)); } while(0)
#define GPIOH_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1 << 7)); } while(0)
#define GPIOI_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 8)); (RCC->AHB1RSTR &= ~(1 << 8)); } while(0)
#define GPIOJ_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 9)); (RCC->AHB1RSTR &= ~(1 << 9)); } while(0)
#define GPIOK_REG_RESET() 	do { (RCC->AHB1RSTR |= (1 << 10)); (RCC->AHB1RSTR &= ~(1 << 10)); } while(0)

// Macro to return port code for given GPIOx base address
	// Use C's conditional / ternary operations - First expression is evaluated, returns LS if true, RS if false (where the RS here is a nested conditional expression)
#define GPIO_BASEADDR_TO_CODE(x) ( (x==GPIOA) ? 0 : (x==GPIOB) ? 1 : (x==GPIOC) ? 2 : (x==GPIOD) ? 3 : (x==GPIOE) ? 4 : (x==GPIOF) ? 5 : (x==GPIOG) ? 6 : (x==GPIOH) ? 7 : (x==GPIOI) ? 8 : (x==GPIOJ) ? 9 : (x==GPIOJ) ? 10 : 0 )

// Macros to reset SPIx peripherals
#define SPI1_REG_RESET() 	do { (RCC->APB2RSTR |= (1 << 12)); (RCC->APB2RSTR &= ~(1 << 12)); } while(0)
#define SPI2_REG_RESET() 	do { (RCC->APB1RSTR |= (1 << 14)); (RCC->APB1RSTR &= ~(1 << 14)); } while(0)
#define SPI3_REG_RESET() 	do { (RCC->APB1RSTR |= (1 << 15)); (RCC->APB1RSTR &= ~(1 << 15)); } while(0)
#define SPI4_REG_RESET() 	do { (RCC->APB2RSTR |= (1 << 13)); (RCC->APB2RSTR &= ~(1 << 13)); } while(0)

// Macros to reset I2Cx peripherals
#define I2C1_REG_RESET() 	do { (RCC->APB1RSTR |= (1 << 21)); (RCC->APB1RSTR &= ~(1 << 21)); } while(0)
#define I2C2_REG_RESET() 	do { (RCC->APB1RSTR |= (1 << 22)); (RCC->APB1RSTR &= ~(1 << 22)); } while(0)
#define I2C3_REG_RESET() 	do { (RCC->APB1RSTR |= (1 << 23)); (RCC->APB1RSTR &= ~(1 << 23)); } while(0)

// IRQ (Interrupt Request) Numbers of STM32F407x MCU
#define IRQ_NO_EXTI0		6
#define IRQ_NO_EXTI1		7
#define IRQ_NO_EXTI2		8
#define IRQ_NO_EXTI3		9
#define IRQ_NO_EXTI4		10
#define IRQ_NO_EXTI9_5		23
#define IRQ_NO_EXTI15_10	40
#define IRQ_NO_SPI1			35
#define IRQ_NO_SPI2			36
#define IRQ_NO_SPI3			51
#define IRQ_NO_SPI4			84
#define IRQ_NO_SPI5			85
#define IRQ_NO_SPI6			86
#define IRQ_NO_I2C1_EV		31
#define IRQ_NO_I2C1_ER		32
#define IRQ_NO_I2C2_EV		33
#define IRQ_NO_I2C2_ER		34
#define IRQ_NO_I2C3_EV		72
#define IRQ_NO_I2C3_ER		73
#define IRQ_NO_USART1		37
#define IRQ_NO_USART2		38
#define IRQ_NO_USART3		39
#define IRQ_NO_UART4		52
#define IRQ_NO_UART5		53
#define IRQ_NO_USART6		71


// IRQ Priority level macros
#define NVIC_IRQ_PRI0		0
#define NVIC_IRQ_PRI1		1
#define NVIC_IRQ_PRI2		2
#define NVIC_IRQ_PRI3		3
#define NVIC_IRQ_PRI4		4
#define NVIC_IRQ_PRI5		5
#define NVIC_IRQ_PRI6		6
#define NVIC_IRQ_PRI7		7
#define NVIC_IRQ_PRI8		8
#define NVIC_IRQ_PRI9		9
#define NVIC_IRQ_PRI10		10
#define NVIC_IRQ_PRI11		11
#define NVIC_IRQ_PRI12		12
#define NVIC_IRQ_PRI13		13
#define NVIC_IRQ_PRI14		14
#define NVIC_IRQ_PRI15		15

// Some generic macros
#define ENABLE				1
#define DISABLE				0
#define SET					ENABLE
#define RESET				DISABLE
#define GPIO_PIN_SET		SET
#define GPIO_PIN_RESET		RESET
#define FLAG_RESET			RESET
#define FLAG_SET			SET

/********** Bit position definitions for SPI peripheral **********/

// SPI_CR1 bit definitions
#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR			3
#define SPI_CR1_SPE			6
#define SPI_CR1_LSBFIRST	7
#define SPI_CR1_SSI			8
#define SPI_CR1_SSM			9
#define SPI_CR1_RXONLY		10
#define SPI_CR1_DFF			11
#define SPI_CR1_CRCNEXT		12
#define SPI_CR1_CRCEN		13
#define SPI_CR1_BIDIOE		14
#define SPI_CR1_BIDIMODE	15

// SPI_CR2 bit definitions
#define SPI_CR2_RXDMAEN		0
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_SSOE		2
#define SPI_CR2_FRF			4
#define SPI_CR2_ERRIE		5
#define SPI_CR2_RXNEIE		6
#define SPI_CR2_TXEIE		7

// SPI_SR bit definitions
#define SPI_SR_RXNE			0
#define SPI_SR_TXE			1
#define SPI_SR_CHSIDE		2
#define SPI_SR_UDR			3
#define SPI_SR_CRCERR		4
#define SPI_SR_MODF			5
#define SPI_SR_OVR			6
#define SPI_SR_BSY			7
#define SPI_SR_FRE			8

/********** Bit position definitions for I2C peripheral **********/

// I2C_CR1 bit definitions
#define I2C_CR1_PE			0
#define I2C_CR1_SMBUS		1
#define I2C_CR1_SMBTYPE		3
#define I2C_CR1_ENARP		4
#define I2C_CR1_ENPEC		5
#define I2C_CR1_ENGC		6
#define I2C_CR1_NOSTRETCH	7
#define I2C_CR1_START		8
#define I2C_CR1_STOP		9
#define I2C_CR1_ACK			10
#define I2C_CR1_POS			11
#define I2C_CR1_PEC			12
#define I2C_CR1_ALERT		13
#define I2C_CR1_SWRST		15

// I2C_CR2 bit definitions
#define I2C_CR2_FREQ		0
#define I2C_CR2_ITERREN		8
#define I2C_CR2_ITEVTEN		9
#define I2C_CR2_ITBUFEN		10
#define I2C_CR2_DMAEN		11
#define I2C_CR2_LAST		12

// I2C_SR1 bit definitions
#define I2C_SR1_SB			0
#define I2C_SR1_ADDR		1
#define I2C_SR1_BTF			2
#define I2C_SR1_ADD10		3
#define I2C_SR1_STOPF		4
#define I2C_SR1_RXNE		6
#define I2C_SR1_TXE			7
#define I2C_SR1_BERR		8
#define I2C_SR1_ARLO		9
#define I2C_SR1_AF			10
#define I2C_SR1_OVR			11
#define I2C_SR1_PECERR		12
#define I2C_SR1_TIMEOUT		14
#define I2C_SR1_SMBALERT	15

// I2C_SR2 bit definitions
#define I2C_SR2_MSL			0
#define I2C_SR2_BUSY		1
#define I2C_SR2_TRA			2
#define I2C_SR2_GENCALL		4
#define I2C_SR2_SMBDEFAULT	5
#define I2C_SR2_SMBHOST		6
#define I2C_SR2_DUALF		7

// I2C_CCR bit definitions
#define I2C_CCR_CCR			0
#define I2C_CCR_DUTY		14
#define I2C_CCR_FS			15


// Include Peripheral-specific header files here to avoid including it each time you're working with stm32f407xx MCU
#include "stm32f407xx_gpio.h"
#include "stm32f407xx_spi.h"
#include "stm32f407xx_i2c.h"
#include "stm32f407xx_usart.h"

#endif /* INC_STM32F407XX_H_ */
